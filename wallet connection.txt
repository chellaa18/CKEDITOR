 
//Metamask connect and get balance
 useEffect(() => {
    const checkMetaMaskLockState = async () => {
      try {
        const web3 = new Web3(window.ethereum);

        if (web3) {
          const isUnlocked = await window.ethereum._metamask.isUnlocked();

          if (!isUnlocked) {
            setAddress("");
            setBalance("");
            console.warn("MetaMask is locked. Please unlock your wallet.");
          } else {
            const storedAddress = localStorage.getItem("address");
            const storedBalance = localStorage.getItem("balance");

            if (storedAddress) {
              setAddress(storedAddress);
            }

            if (storedBalance) {
              setBalance(storedBalance);
            }
          }
        } else {
          console.error("MetaMask not installed.");
        }
      } catch (error) {
        console.error("Error checking MetaMask lock state:", error.message);
      }
    };

    checkMetaMaskLockState();
  }, []);

  const connectWallet = async () => {
    try {
      const web3 = new Web3(window.ethereum);
      if (web3) {
        const accounts = await window.ethereum.request({
          method: "eth_requestAccounts",
        });
  
        setAddress(accounts[0]);
  
        if (accounts.length > 0) {
          const balance = await web3.eth.getBalance(accounts[0]);
          const balanceInEther = web3.utils.fromWei(balance, "ether");
          setBalance(balanceInEther);
          console.log(balanceInEther);
        } else {
          console.error("MetaMask not connected. Please connect your wallet.");
        }
      } else {
        console.error("MetaMask not installed.");
      }
    } catch (error) {
      console.error("Error connecting to MetaMask:", error.message);
    }
  };


/////////SWITCH NETWORK
  const disconnectNetwork = async () => {
    try {
      if (window.ethereum) {
        // // Switch to Mainnet or another network of your choice
        await window.ethereum.request({
          method: "wallet_switchEthereumChain",
          params: [{ chainId: "0x1" }], // Mainnet chain ID
        });
  
      
  
        console.log("Network disconnected successfully.");
      } else {
        console.error("MetaMask not installed.");
      }
    } catch (error) {
      console.error("Error disconnecting network:", error.message);
    }
  };



///Without login Dashboard navigate restriction

import React from "react";
import { Routes, Route, Navigate } from "react-router-dom";


const PrivateRoute = ({ children }) => {
  const token = localStorage.getItem("LoggedUserToken");
  const expiryTime = getExpiryTimeFromToken(token);

  if (token && expiryTime && expiryTime >= Date.now()) {
    return <>{children}</>;
  } else {
    
      localStorage.removeItem("LoggedUserToken");
      return <Navigate to="/" />;
    
  }
};

const getExpiryTimeFromToken = (token) => {
  if (!token) {
    return null;
  }
  const tokenParts = token.split(".");
  if (tokenParts.length < 3) {
    return null;
  }
  try {
    const tokenPayload = atob(tokenParts[1]);
    const parsedToken = JSON.parse(tokenPayload);
    if (parsedToken.exp) {
      return parsedToken.exp * 1000;
    } else {
      return null;
    }
  } catch (error) {
    console.error("Error decoding or parsing the token:", error);
    return null;
  }
};

export default PrivateRoute;


  <Route
          path="/profile"
          element={
            <PrivateRoute>
              <Profile />
            </PrivateRoute>
          }
        />
